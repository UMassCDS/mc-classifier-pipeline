# A build system is required to convert your code into a distributable package.
# setuptools is the oldest and most common build tool, but we also like Poetry
[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mc_classifier_pipeline"
version = "0.0.1"
description = "Pipelines for preparing documents from Media Cloud's news archive for annotation and machine learning."
readme = "README.md"

# What version of python does your library work with?
requires-python = ">=3.10"

# Metadata about your package in case you upload it to PYPI
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

# All the dependencies needed for running your module go here
dependencies = [
    "accelerate",
    "joblib",
    "label-studio-sdk>1.0",
    "mediacloud",
    "numpy",
    "optuna",
    "pandas",
    "python-dotenv",
    "scikit-learn",
    "torch",
    "tqdm",
    "transformers",
]

[project.optional-dependencies]
# Extra dependencies only needed for running tests go here
test = ["pytest"]

# Dependencies that are useful only to developers, like an autoformatter and
# support for visualizations in jupyter notebooks go here
dev = [
    "bs4",
    "dotenv",
    "jupyter",
    "lxml_html_clean",
    "matplotlib",
    "mediacloud",
    "newspaper3k",
    "nltk",
    "requests",
    "ruff",
    "seaborn",
    "sphinx",
    "textblob"
]

# If your project contains scripts you'd like to be available command line, you can define them here.
# The value must be of the form "<package_name>:<module_name>.<function>"
[project.scripts]
retrieve-mc-docs = "mc_classifier_pipeline.doc_retriever:main"
mc-pipeline = "mc_classifier_pipeline.run_pipeline:main"

# Add customizations to the Ruff linter as described on https://docs.astral.sh/ruff/configuration/
[tool.ruff]
# Override ruff's default so that lines aren't more than 120 characters
line-length = 119
